services:
  postgresDB:
    image: postgres:16
    env_file: .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d scrap -U scrap"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d/

  scrap:
    build: .
    env_file:
      - .env
    environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_PORT: ${POSTGRES_PORT}
    depends_on:
      postgresDB:
        condition: service_healthy

  metabase-db:
    image: postgres:16
    container_name: metabase-db
    restart: always
    environment:
      POSTGRES_USER: ${MTBPOSTGRES_USER}
      POSTGRES_PASSWORD: ${MTBPOSTGRES_PASSWORD}
      POSTGRES_DB: ${MTBPOSTGRES_DB}
    ports:
      - "${MTBPOSTGRES_PORT}:${POSTGRES_PORT}"  # Cambiado para evitar conflicto de puerto
    volumes:
      - metabase-data:/var/lib/postgresql/data
      - ./metabaseDBMig:/docker-entrypoint-initdb.d

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MTBPOSTGRES_DB}
      MB_DB_PORT: ${POSTGRES_PORT}
      MB_DB_USER: ${MTBPOSTGRES_USER}
      MB_DB_PASS: ${MTBPOSTGRES_PASSWORD}
      MB_DB_HOST: metabase-db
    depends_on:
      - metabase-db

volumes:
  postgres_data:
  metabase-data: